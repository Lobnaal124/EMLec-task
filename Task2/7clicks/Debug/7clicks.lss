
7clicks.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000182  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000696  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d8  00000000  00000000  000008ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002ec  00000000  00000000  00000e86  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  00001174  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000355  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ac  00000000  00000000  000014fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  000015a9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 5b 00 	call	0xb6	; 0xb6 <main>
  64:	0c 94 95 00 	jmp	0x12a	; 0x12a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <update_leds>:
#include "Libarary/STD_TYPE.h"
#define  F_CPU 16000000UL
#include <util/delay.h>
void update_leds(u8 value) {
	// Bit 0 ? PORTB3
	if (value & (1 << 0))
  6c:	80 ff       	sbrs	r24, 0
  6e:	04 c0       	rjmp	.+8      	; 0x78 <update_leds+0xc>
	SET_BIT(PORTB, 3);
  70:	98 b3       	in	r25, 0x18	; 24
  72:	98 60       	ori	r25, 0x08	; 8
  74:	98 bb       	out	0x18, r25	; 24
  76:	03 c0       	rjmp	.+6      	; 0x7e <update_leds+0x12>
	else
	CLR_BIT(PORTB, 3);
  78:	98 b3       	in	r25, 0x18	; 24
  7a:	97 7f       	andi	r25, 0xF7	; 247
  7c:	98 bb       	out	0x18, r25	; 24

	// Bit 1 ? PORTC2
	if (value & (1 << 1))
  7e:	81 ff       	sbrs	r24, 1
  80:	04 c0       	rjmp	.+8      	; 0x8a <update_leds+0x1e>
	SET_BIT(PORTC, 2);
  82:	95 b3       	in	r25, 0x15	; 21
  84:	94 60       	ori	r25, 0x04	; 4
  86:	95 bb       	out	0x15, r25	; 21
  88:	03 c0       	rjmp	.+6      	; 0x90 <update_leds+0x24>
	else
	CLR_BIT(PORTC, 2);
  8a:	95 b3       	in	r25, 0x15	; 21
  8c:	9b 7f       	andi	r25, 0xFB	; 251
  8e:	95 bb       	out	0x15, r25	; 21

	// Bit 2 ? PORTC7
	if (value & (1 << 2))
  90:	82 ff       	sbrs	r24, 2
  92:	04 c0       	rjmp	.+8      	; 0x9c <update_leds+0x30>
	SET_BIT(PORTC, 7);
  94:	95 b3       	in	r25, 0x15	; 21
  96:	90 68       	ori	r25, 0x80	; 128
  98:	95 bb       	out	0x15, r25	; 21
  9a:	03 c0       	rjmp	.+6      	; 0xa2 <update_leds+0x36>
	else
	CLR_BIT(PORTC, 7);
  9c:	95 b3       	in	r25, 0x15	; 21
  9e:	9f 77       	andi	r25, 0x7F	; 127
  a0:	95 bb       	out	0x15, r25	; 21

	// Bit 3 ? PORTD6
	if (value & (1 << 3))
  a2:	83 ff       	sbrs	r24, 3
  a4:	04 c0       	rjmp	.+8      	; 0xae <update_leds+0x42>
	SET_BIT(PORTD, 6);
  a6:	82 b3       	in	r24, 0x12	; 18
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	82 bb       	out	0x12, r24	; 18
  ac:	08 95       	ret
	else
	CLR_BIT(PORTD, 6);
  ae:	82 b3       	in	r24, 0x12	; 18
  b0:	8f 7b       	andi	r24, 0xBF	; 191
  b2:	82 bb       	out	0x12, r24	; 18
  b4:	08 95       	ret

000000b6 <main>:
}
int main(void)
{    
	SET_BIT(DDRB,3);
  b6:	87 b3       	in	r24, 0x17	; 23
  b8:	88 60       	ori	r24, 0x08	; 8
  ba:	87 bb       	out	0x17, r24	; 23
	SET_BIT(DDRC,2);
  bc:	84 b3       	in	r24, 0x14	; 20
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRC,7);
  c2:	84 b3       	in	r24, 0x14	; 20
  c4:	80 68       	ori	r24, 0x80	; 128
  c6:	84 bb       	out	0x14, r24	; 20
	SET_BIT(DDRD,6);
  c8:	81 b3       	in	r24, 0x11	; 17
  ca:	80 64       	ori	r24, 0x40	; 64
  cc:	81 bb       	out	0x11, r24	; 17
	
	CLR_BIT(DDRD,2);
  ce:	81 b3       	in	r24, 0x11	; 17
  d0:	8b 7f       	andi	r24, 0xFB	; 251
  d2:	81 bb       	out	0x11, r24	; 17
	SET_BIT(PORTD, 2);  
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	84 60       	ori	r24, 0x04	; 4
  d8:	82 bb       	out	0x12, r24	; 18

	 u8 count = 0;
  da:	c0 e0       	ldi	r28, 0x00	; 0
    while (1){
		 if (GIT_BIT(PIND, 2) == 0)
  dc:	82 99       	sbic	0x10, 2	; 16
  de:	fe cf       	rjmp	.-4      	; 0xdc <main+0x26>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  e0:	2f ef       	ldi	r18, 0xFF	; 255
  e2:	80 e7       	ldi	r24, 0x70	; 112
  e4:	92 e0       	ldi	r25, 0x02	; 2
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <main+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <main+0x3a>
  f0:	00 00       	nop
		 {
			 _delay_ms(50); 
			 if (GIT_BIT(PIND, 2) == 0)
  f2:	82 99       	sbic	0x10, 2	; 16
  f4:	f3 cf       	rjmp	.-26     	; 0xdc <main+0x26>
			 {
				 count = (count + 1) % 8;  // count from 0 to 7
  f6:	8c 2f       	mov	r24, r28
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	01 96       	adiw	r24, 0x01	; 1
  fc:	87 70       	andi	r24, 0x07	; 7
  fe:	90 78       	andi	r25, 0x80	; 128
 100:	99 23       	and	r25, r25
 102:	24 f4       	brge	.+8      	; 0x10c <main+0x56>
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	88 6f       	ori	r24, 0xF8	; 248
 108:	9f 6f       	ori	r25, 0xFF	; 255
 10a:	01 96       	adiw	r24, 0x01	; 1
 10c:	c8 2f       	mov	r28, r24
				 update_leds(count);
 10e:	0e 94 36 00 	call	0x6c	; 0x6c <update_leds>

				 // Wait until button is released
				 while (GIT_BIT(PIND, 2) == 0);
 112:	82 9b       	sbis	0x10, 2	; 16
 114:	fe cf       	rjmp	.-4      	; 0x112 <main+0x5c>
 116:	2f ef       	ldi	r18, 0xFF	; 255
 118:	80 e7       	ldi	r24, 0x70	; 112
 11a:	92 e0       	ldi	r25, 0x02	; 2
 11c:	21 50       	subi	r18, 0x01	; 1
 11e:	80 40       	sbci	r24, 0x00	; 0
 120:	90 40       	sbci	r25, 0x00	; 0
 122:	e1 f7       	brne	.-8      	; 0x11c <main+0x66>
 124:	00 c0       	rjmp	.+0      	; 0x126 <main+0x70>
 126:	00 00       	nop
 128:	d9 cf       	rjmp	.-78     	; 0xdc <main+0x26>

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
